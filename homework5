387. First Unique Character in a String
class Solution {
    public int firstUniqChar(String s) {


 Map<Character, Integer> map = new HashMap();
        char[] chars = s.toCharArray();

        for (char ch : chars) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);

        }

        for (int i = 0; i < s.length(); i++) {
            if (map.get(chars[i]) == 1) {
                return i;
            }
        }
        return -1;

    }
}
146. LRU 缓存机制
class Node{
    public int key;
    public int val;
    public Node prev;
    public Node next;
    public Node(int key, int val){
        this.key=key;
        this.val=val;
    }
}
class DoubleLinkedList {
    Node head;
    Node tail;
    public DoubleLinkedList(){
        head =new Node(0, 0 );
        tail =new Node (0,0);
        head.next=tail;
        tail.prev=head;
    }
    public void addFirst (Node node ){
        node.next = head.next;
        node.prev =head;
        head.next.prev=node;
        head.next=node;
    }
    public int delete(Node n ){
        int key =n.key;
        n.next.prev = n.prev;
        n.prev.next=n.next;
        return key;
    }
    public int deleteLast(){
        if (head.next==tail)return -1;
        return delete(tail.prev);
    }


}


class LRUCache {
HashMap<Integer,Node> map;
DoubleLinkedList cache;
int cap;
    public LRUCache(int capacity) {
            map =new HashMap<>();
            cache =new DoubleLinkedList();
            cap = capacity;
     }

    public void put(int key, int val) {
            Node newNode=new Node(key,val);
            if (map.containsKey(key)){
            cache.delete(map.get(key));
            cache.addFirst(newNode);
            map.put(key,newNode);
    }else {
        if (map.size()==cap){
            int k =cache.deleteLast();
            map.remove(k);
            }
            cache.addFirst(newNode);
            map.put(key,newNode);

        }
    }
    public int get(int key){
        if (!map.containsKey(key)) return -1;
        int val =map.get(key).val;
        put (key,val);
        return val;
    }

}
680. Valid Palindrome II
class Solution {

 public boolean validPalindrome(String s) {
 int front = 0;
 int end = s.length() - 1;

 while (front < end) {
 if (s.charAt(front) != s.charAt(end)) {
    return validPalindromeHelper(s, front + 1, end) || validPalindromeHelper(s, front, end - 1);
            }

            front++;
            end--;
        }
        return true;
    }

    public boolean validPalindromeHelper(String s, int front, int end) {
        while (front < end) {
            if (s.charAt(front) != s.charAt(end)) {
                return false;
            }
            front++;
            end--;
        }
        return true;
    }

}
493. Reverse Pairs
class Solution {
    public int reversePairs(int[] nums) {

         int n =nums.length;
         return mergeSort(nums,0, n-1);
    }
    private int mergeSort(int []nums,int lo,int hi){
        if (lo>=hi)return 0;
        int mid = lo +(hi-lo)/2;
        int res =0;
        res+=mergeSort(nums,lo,mid);
        res+=mergeSort(nums,mid+1,hi);
        res+=merge(nums,lo,mid,hi);
        return res;
    }
    private int merge(int[]nums,int lo,int mid,int hi){
        int count =0;
        int[]a =new int[hi-lo+1];
        int p=lo;
        int q=mid+1;
        while (p<=mid && q<=hi){
            if((long)nums[p]>2*(long)nums[q]){
                //1,3,4
                //1,2
                count+=mid -p+1;
                q++;
            }else {p++;}
        }
        p=lo;
        q=mid+1;
       int  index=0;
        while (p<=mid && q<=hi){
            if (nums[p]>nums[q]){
                a[index++]=nums[q++];
            }else{
                a[index++]=nums[p++];
            }
        }
        while (p<=mid){
            a[index++]=nums[p++];
        }
        while (q<=hi){
            a[index++]=nums[q++];
        }
        System.arraycopy(a,0,nums,lo,hi-lo+1);
        return count;
    }
}
151. Reverse Words in a String
class Solution {
    public String reverseWords(String s) {
        s = s.trim();
        int j = s.length() - 1, i = j;
        StringBuilder res = new StringBuilder();
        while(i >= 0) {
            while(i >= 0 && s.charAt(i) != ' ') i--;
            res.append(s.substring(i + 1, j + 1) + " ");
            while(i >= 0 && s.charAt(i) == ' ') i--;
            j = i;
        }
        return res.toString().trim();

    }
}
