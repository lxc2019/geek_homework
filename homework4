22. 括号生成
class Solution {
     List<String> res = new ArrayList<>();
    public List<String> generateParenthesis(int n) {
    dfs(n, n, "");
        return res;
    }
    private void dfs(int left, int right, String curStr) {
        if (left == 0 && right == 0) {
            res.add(curStr);
            return;
        }

        if (left > 0) {
            dfs(left - 1, right, curStr + "(");
        }
        if (right > left) {
            dfs(left, right - 1, curStr + ")");
        }
    }
}

208. 实现 Trie (前缀树)
class Trie extends HashMap<Character, Trie> {

    private boolean flag;

    /** Initialize your data structure here. */
    public Trie() {
    }

    /** Inserts a word into the trie. */
    public void insert(String word) {
        Trie current = this;
        for (char ch : word.toCharArray()) {
            Trie child = current.get(ch);
            if (child == null) {
                child = new Trie();
                current.put(ch, child);
            }
            current = child;
        }
        current.flag = true;
    }

    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie current = this;
        for (char ch : word.toCharArray()) {
            Trie child = current.get(ch);
            if (child == null) {
                return false;
            }
            current = child;
        }
        return current.flag;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie current = this;
        for (char ch : prefix.toCharArray()) {
            Trie child = current.get(ch);
            if (child == null) {
                return false;
            }
            current = child;
        }
        return true;
    }
}

190. 颠倒二进制位
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
         int ans = 0;
        for(int i = 0; i < 32; i++) {
            //二进制最后一位bit
            int bit = n&1;
            //右移一位
            n = n >> 1;
            //ans左移一位加上bit
            ans = (ans << 1) + bit;
        }
        return ans;
    }
}
231. 2的幂
class Solution {
    public boolean isPowerOfTwo(int n) {
 if(n==0){
            return false;
        }
         if(n==1){
            return true;
        }

        while(n%2==0){
            n=n/2;
        }

        return n==1;
    }
}
191. 位1的个数
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count = 0;
        int i = 0;
        while(i < 32) {
            if((n & 1) == 0)  //统计0的个数
                count++;
            n = n >> 1;
            i++;
        }

        return 32 - count;
    }
}
